  public ActionResult RedirectToPayPal(int orderId)
  {
      var order = _context.Orders.Find(orderId);
      if (order == null)
      {
          return View("PaymentFailed");
      }

      var orderDetails = _context.OrderDetails.Where(x => x.OrderId == orderId).ToList();

      var clientId = _configuration.GetValue<string>("PayPal:Key");
      var clientSecret = _configuration.GetValue<string>("PayPal:Secret");
      var mode = _configuration.GetValue<string>("PayPal:mode");
      var apiContext = PaypalConfiguration.GetAPIContext(clientId, clientSecret, mode);

      try
      {
          string baseURI = $"{Request.Scheme}://{Request.Host}/cart/PaypalReturn?";
          var guid = Guid.NewGuid().ToString();

          var payment = new Payment
          {
              intent = "sale",
              payer = new Payer { payment_method = "paypal" },
              transactions = new List<Transaction>
      {
          new Transaction
          {
              description = $"Order {order.Id}",
              invoice_number = Guid.NewGuid().ToString(),
              amount = new Amount
              {
                  currency = "USD",
                  total = order.Total?.ToString("F"),
                  //total = "5.00"
              },

              ////item_list = new ItemList
              ////{
              ////    items = orderDetails.Select(p => new Item
              ////    {
              ////        name = p.ProductTitle,
              ////        currency = "USD",
              ////        price = p.ProductPrice.ToString("F"),
              ////        quantity = p.Count.ToString(),
              ////        sku = p.ProductId.ToString(),
              ////    }).ToList(),

              ////},
          }
      },
              redirect_urls = new RedirectUrls
              {
                  cancel_url = $"{baseURI}&Cancel=true",
                  return_url = $"{baseURI}orderId={order.Id}"
              }
          };
          //Add shipping price
          ////payment.transactions[0].item_list.items.Add(new Item
          ////{
          ////    name = "Shipping cost",
          ////    currency = "USD",
          ////    price = order.Shipping?.ToString("F"),
          ////    quantity = "1",
          ////    sku = "1",
          ////});

          var createdPayment = payment.Create(apiContext);
          var approvalUrl = createdPayment.links.FirstOrDefault(l => l.rel.ToLower() == "approval_url")?.href;

          _httpContextAccessor.HttpContext.Session.SetString("payment", createdPayment.id);
          return Redirect(approvalUrl);
      }
      catch (Exception e)
      {
          return View("PaymentFailed");
      }
  }

        public ActionResult PaypalReturn(int orderId, string PayerID)
        {
            var order = _context.Orders.Find(orderId);
            if (order == null)
            {
                return View("PaymentFailed");
            }

            var clientId = _configuration.GetValue<string>("PayPal:Key");
            var clientSecret = _configuration.GetValue<string>("PayPal:Secret");
            var mode = _configuration.GetValue<string>("PayPal:mode");
            var apiContext = PaypalConfiguration.GetAPIContext(clientId, clientSecret, mode);

            try
            {
                var paymentId = _httpContextAccessor.HttpContext.Session.GetString("payment");
                var paymentExecution = new PaymentExecution { payer_id = PayerID };
                var payment = new Payment { id = paymentId };

                var executedPayment = payment.Execute(apiContext, paymentExecution);

                if (executedPayment.state.ToLower() != "approved")
                {
                    return View("PaymentFailed");
                }

                Response.Cookies.Delete("Cart");
                // Save the PayPal transaction ID and update order status
                order.TransId = executedPayment.transactions[0].related_resources[0].sale.id;
                order.Status = executedPayment.state.ToLower();
                _context.SaveChanges();

                ViewData["orderId"] = order.Id;

                return View("PaymentSuccess");
            }
            catch (Exception)
            {
                return View("PaymentFailed");
            }
        }